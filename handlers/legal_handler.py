from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import json

from database.db_manager import db_manager
from utils.keyboards import get_legal_keyboard, get_main_menu_keyboard
from utils.texts import get_text

router = Router()

@router.callback_query(F.data == "my_rights")
async def legal_menu(callback: CallbackQuery, language: str = "uk"):
    """Show legal information menu"""
    await callback.answer()
    
    menu_text = get_text("legal_menu_text", language, 
                        default="üìú –ü—Ä–∞–≤–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:")
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=get_legal_keyboard(language)
    )

@router.callback_query(F.data.startswith("legal_"))
async def show_legal_category(callback: CallbackQuery, language: str = "uk"):
    """Show legal documents by category"""
    await callback.answer()
    
    category = callback.data.split("_")[1]  # benefits, compensation, medical, procedures
    
    try:
        # Load legal documents from catalog
        with open("catalog.json", "r", encoding="utf-8") as f:
            catalog = json.load(f)
        
        documents = catalog.get("legal_documents", {}).get(f"veterans_{category}", [])
        
        if not documents:
            await callback.message.edit_text(
                get_text("no_legal_documents", language, default="–î–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
                reply_markup=get_legal_keyboard(language)
            )
            return
        
        # Create documents list
        documents_text = f"üìã **{get_text(f'legal_{category}', language)}**\n\n"
        
        keyboard_buttons = []
        
        for i, doc in enumerate(documents, 1):
            title = doc["title"].get(language, doc["title"]["uk"])
            documents_text += f"{i}. {title}\n"
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{i}. {title[:30]}...",
                    callback_data=f"doc_{doc['id']}"
                )
            ])
        
        # Add navigation buttons
        keyboard_buttons.extend([
            [
                InlineKeyboardButton(
                    text=get_text("back_to_legal", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–∞–≤–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"),
                    callback_data="my_rights"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("back_to_menu", language),
                    callback_data="main_menu"
                )
            ]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            documents_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            get_text("legal_error", language, default="–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"),
            reply_markup=get_main_menu_keyboard(language)
        )

@router.callback_query(F.data.startswith("doc_"))
async def show_legal_document(callback: CallbackQuery, language: str = "uk"):
    """Show specific legal document"""
    await callback.answer()
    
    doc_id = callback.data.split("_")[1]
    
    try:
        # Load document from catalog
        with open("catalog.json", "r", encoding="utf-8") as f:
            catalog = json.load(f)
        
        # Find document by ID
        document = None
        for category_docs in catalog.get("legal_documents", {}).values():
            for doc in category_docs:
                if doc["id"] == doc_id:
                    document = doc
                    break
            if document:
                break
        
        if not document:
            await callback.message.edit_text(
                get_text("document_not_found", language, default="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
                reply_markup=get_legal_keyboard(language)
            )
            return
        
        # Format document
        title = document["title"].get(language, document["title"]["uk"])
        content = document["content"].get(language, document["content"]["uk"])
        
        doc_text = f"üìÑ **{title}**\n\n"
        doc_text += content
        
        # Add metadata
        if document.get("last_updated"):
            doc_text += f"\n\nüìÖ {get_text('last_updated', language, default='–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')}: {document['last_updated']}"
        
        if document.get("source_url"):
            doc_text += f"\nüîó {get_text('source', language, default='–î–∂–µ—Ä–µ–ª–æ')}: {document['source_url']}"
        
        # Create keyboard
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text("share_document", language, default="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è"),
                    callback_data=f"share_{doc_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("back_to_legal", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–∞–≤–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"),
                    callback_data="my_rights"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("back_to_menu", language),
                    callback_data="main_menu"
                )
            ]
        ])
        
        # Split long messages
        if len(doc_text) > 4000:
            # Send in parts
            parts = [doc_text[i:i+4000] for i in range(0, len(doc_text), 4000)]
            
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # Last part
                    await callback.message.edit_text(
                        part,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    await callback.message.answer(part, parse_mode="Markdown")
        else:
            await callback.message.edit_text(
                doc_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
    except Exception as e:
        await callback.message.edit_text(
            get_text("document_error", language, default="–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
            reply_markup=get_legal_keyboard(language)
        )

@router.callback_query(F.data.startswith("share_"))
async def share_document(callback: CallbackQuery, language: str = "uk"):
    """Share legal document"""
    await callback.answer()
    
    doc_id = callback.data.split("_")[1]
    
    share_text = get_text("document_shared", language, 
                         default="üì§ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ—à–∏—Ä–µ–Ω–Ω—è!\n\n–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à–∏–º –≤–µ—Ç–µ—Ä–∞–Ω–∞–º.")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("back_to_document", language, default="–ù–∞–∑–∞–¥ –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
                callback_data=f"doc_{doc_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_legal", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–∞–≤–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"),
                callback_data="my_rights"
            )
        ]
    ])
    
    await callback.message.edit_text(
        share_text,
        reply_markup=keyboard
    )

@router.callback_query(F.data == "legal_templates")
async def legal_templates(callback: CallbackQuery, language: str = "uk"):
    """Show legal document templates"""
    await callback.answer()
    
    templates_text = get_text("legal_templates_text", language, 
                             default="üìã –®–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤\n\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –≥–æ—Ç–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏ –∑–∞—è–≤ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("disability_application", language, default="–ó–∞—è–≤–∞ –Ω–∞ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å"),
                callback_data="template_disability"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("benefits_application", language, default="–ó–∞—è–≤–∞ –Ω–∞ –ø—ñ–ª—å–≥–∏"),
                callback_data="template_benefits"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("housing_application", language, default="–ó–∞—è–≤–∞ –Ω–∞ –∂–∏—Ç–ª–æ"),
                callback_data="template_housing"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_legal", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–∞–≤–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"),
                callback_data="my_rights"
            )
        ]
    ])
    
    await callback.message.edit_text(
        templates_text,
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("template_"))
async def show_template(callback: CallbackQuery, language: str = "uk"):
    """Show document template"""
    await callback.answer()
    
    template_type = callback.data.split("_")[1]
    
    templates = {
        "disability": {
            "title": get_text("disability_template_title", language, default="–ó–∞—è–≤–∞ –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ"),
            "content": get_text("disability_template_content", language, 
                              default="–î–æ –º–µ–¥–∏–∫–æ-—Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó\n\n–ó–ê–Ø–í–ê\n\n–ü—Ä–æ—à—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–µ–¥–∏–∫–æ-—Å–æ—Ü—ñ–∞–ª—å–Ω—É –µ–∫—Å–ø–µ—Ä—Ç–∏–∑—É –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —É –∑–≤'—è–∑–∫—É –∑ [–≤–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É].\n\n–î–æ –∑–∞—è–≤–∏ –¥–æ–¥–∞—é:\n1. –ö–æ–ø—ñ—é –ø–∞—Å–ø–æ—Ä—Ç–∞\n2. –ú–µ–¥–∏—á–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏\n3. –ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π\n\n–î–∞—Ç–∞: ___________\n–ü—ñ–¥–ø–∏—Å: ___________")
        },
        "benefits": {
            "title": get_text("benefits_template_title", language, default="–ó–∞—è–≤–∞ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–ª—å–≥"),
            "content": get_text("benefits_template_content", language,
                              default="–î–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–æ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É –Ω–∞—Å–µ–ª–µ–Ω–Ω—è\n\n–ó–ê–Ø–í–ê\n\n–ü—Ä–æ—à—É –Ω–∞–¥–∞—Ç–∏ –º–µ–Ω—ñ –ø—ñ–ª—å–≥–∏, –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤ –≤—ñ–π–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —á–∏–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞.\n\n–î–æ –∑–∞—è–≤–∏ –¥–æ–¥–∞—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏.\n\n–î–∞—Ç–∞: ___________\n–ü—ñ–¥–ø–∏—Å: ___________")
        },
        "housing": {
            "title": get_text("housing_template_title", language, default="–ó–∞—è–≤–∞ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∏—Ç–ª–∞"),
            "content": get_text("housing_template_content", language,
                              default="–î–æ –º—ñ—Å—Ü–µ–≤–æ—ó –¥–µ—Ä–∂–∞–≤–Ω–æ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó\n\n–ó–ê–Ø–í–ê\n\n–ü—Ä–æ—à—É –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –º–µ–Ω–µ –Ω–∞ –æ–±–ª—ñ–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∏—Ç–ª–∞ —è–∫ —É—á–∞—Å–Ω–∏–∫–∞ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π.\n\n–î–æ –∑–∞—è–≤–∏ –¥–æ–¥–∞—é:\n1. –î–æ–≤—ñ–¥–∫—É –ø—Ä–æ —Å–∫–ª–∞–¥ —Å—ñ–º'—ó\n2. –ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π\n3. –î–æ–≤—ñ–¥–∫—É –ø—Ä–æ –¥–æ—Ö–æ–¥–∏\n\n–î–∞—Ç–∞: ___________\n–ü—ñ–¥–ø–∏—Å: ___________")
        }
    }
    
    template = templates.get(template_type)
    
    if not template:
        await callback.message.edit_text(
            get_text("template_not_found", language, default="–®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
            reply_markup=get_legal_keyboard(language)
        )
        return
    
    template_text = f"üìÑ **{template['title']}**\n\n```\n{template['content']}\n```"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("copy_template", language, default="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω"),
                callback_data=f"copy_{template_type}"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_templates", language, default="–ù–∞–∑–∞–¥ –¥–æ —à–∞–±–ª–æ–Ω—ñ–≤"),
                callback_data="legal_templates"
            )
        ]
    ])
    
    await callback.message.edit_text(
        template_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )