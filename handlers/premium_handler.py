from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

from database.db_manager import db_manager
from database.models import SubscriptionStatus
from utils.keyboards import get_main_menu_keyboard
from utils.texts import get_text
from config import config

router = Router()

@router.callback_query(F.data == "premium")
async def premium_menu(callback: CallbackQuery, language: str = "uk"):
    """Show premium subscription menu"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # Check current subscription status
    user = await db_manager.get_user(user_id)
    is_premium = user and user.subscription_status == SubscriptionStatus.PREMIUM
    
    if is_premium:
        await show_premium_dashboard(callback, user, language)
    else:
        await show_premium_offer(callback, language)

async def show_premium_offer(callback: CallbackQuery, language: str):
    """Show premium subscription offer"""
    premium_text = get_text("premium_benefits", language).format(price=config.PREMIUM_PRICE)
    premium_text = get_text("premium_benefits", language).format(price=config.get('PREMIUM_PRICE', 99))
    
    # Add detailed benefits
    benefits_list = [
        get_text("unlimited_ai_chats", language, default="–ù–µ–æ–±–º–µ–∂–µ–Ω—ñ —á–∞—Ç–∏ –∑ –®–Ü"),
        get_text("priority_support", language, default="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"),
        get_text("advanced_analytics", language, default="–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ—é"),
        get_text("direct_psychologist", language, default="–ü—Ä—è–º–∏–π –∑–≤'—è–∑–æ–∫ –∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º–∏"),
        get_text("personalized_recommendations", language, default="–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"),
        get_text("voice_assistant_unlimited", language, default="–ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç"),
        get_text("crisis_priority", language, default="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É –∫—Ä–∏–∑–æ–≤–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö"),
        get_text("exclusive_content", language, default="–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    ]
    
    premium_text += f"\n\n‚ú® **{get_text('premium_features', language, default='–ü—Ä–µ–º—ñ—É–º —Ñ—É–Ω–∫—Ü—ñ—ó')}:**\n"
    for benefit in benefits_list:
        premium_text += f"‚Ä¢ {benefit}\n"
    
    # Add trial offer
    premium_text += f"\nüéÅ **{get_text('trial_offer', language, default='–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è')}:**\n"
    premium_text += get_text("trial_description", language, 
                           default="–ü–µ—Ä—à—ñ 7 –¥–Ω—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ! –°–∫–∞—Å—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("start_trial", language, default="üéÅ –ü–æ—á–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"),
                callback_data="start_trial"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("subscribe_premium", language),
                callback_data="subscribe_premium"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("learn_more", language, default="–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ"),
                callback_data="premium_details"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_menu", language),
                callback_data="main_menu"
            )
        ]
    ])
    
    await callback.message.edit_text(
        premium_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

async def show_premium_dashboard(callback: CallbackQuery, user, language: str):
    """Show premium user dashboard"""
    dashboard_text = f"üíé **{get_text('premium_dashboard', language, default='–ü—Ä–µ–º—ñ—É–º –ø–∞–Ω–µ–ª—å')}**\n\n"
    dashboard_text += f"‚úÖ {get_text('premium_active', language, default='–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞')}\n\n"
    
    # Show subscription details
    if user.subscription_expires:
        expires_date = user.subscription_expires.strftime('%d.%m.%Y')
        dashboard_text += f"üìÖ {get_text('expires_on', language, default='–î—ñ—î –¥–æ')}: {expires_date}\n\n"
    
    # Show usage statistics
    try:
        async with db_manager.pool.acquire() as conn:
            stats = await conn.fetchrow('''
                SELECT 
                    COUNT(*) FILTER (WHERE timestamp >= NOW() - INTERVAL '30 days') as monthly_chats,
                    COUNT(*) FILTER (WHERE is_voice = true AND timestamp >= NOW() - INTERVAL '30 days') as monthly_voice
                FROM ai_chats 
                WHERE user_id = $1
            ''', user.user_id)
            
            if stats:
                dashboard_text += f"üìä **{get_text('monthly_usage', language, default='–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞ –º—ñ—Å—è—Ü—å')}:**\n"
                dashboard_text += f"üí¨ {get_text('ai_chats', language, default='–®–Ü —á–∞—Ç–∏')}: {stats['monthly_chats']}\n"
                dashboard_text += f"üéô {get_text('voice_sessions', language, default='–ì–æ–ª–æ—Å–æ–≤—ñ —Å–µ—Å—ñ—ó')}: {stats['monthly_voice']}\n\n"
    except Exception:
        pass
    
    dashboard_text += f"üéØ **{get_text('premium_features_available', language, default='–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó')}:**\n"
    dashboard_text += f"‚Ä¢ {get_text('unlimited_access', language, default='–ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π')}\n"
    dashboard_text += f"‚Ä¢ {get_text('priority_support_active', language, default='–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞')}\n"
    dashboard_text += f"‚Ä¢ {get_text('advanced_analytics_active', language, default='–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞')}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("manage_subscription", language, default="–ö–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–æ—é"),
                callback_data="manage_subscription"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("premium_support", language, default="–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"),
                callback_data="premium_support"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("referral_program", language, default="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞"),
                callback_data="referral_program"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_menu", language),
                callback_data="main_menu"
            )
        ]
    ])
    
    await callback.message.edit_text(
        dashboard_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "start_trial")
async def start_trial(callback: CallbackQuery, language: str = "uk"):
    """Start premium trial"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    try:
        # Check if user already had trial
        user = await db_manager.get_user(user_id)
        if user and user.subscription_status != SubscriptionStatus.FREE:
            await callback.message.edit_text(
                get_text("trial_already_used", language, default="–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=get_text("subscribe_premium", language),
                            callback_data="subscribe_premium"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text=get_text("back_to_menu", language),
                            callback_data="main_menu"
                        )
                    ]
                ])
            )
            return
        
        # Activate trial
        trial_expires = datetime.now() + timedelta(days=7)
        
        async with db_manager.pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET 
                    subscription_status = $1,
                    subscription_expires = $2
                WHERE user_id = $3
            ''', SubscriptionStatus.TRIAL.value, trial_expires, user_id)
        
        trial_text = f"üéâ **{get_text('trial_activated', language, default='–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!')}**\n\n"
        trial_text += f"‚úÖ {get_text('trial_duration', language, default='–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 7 –¥–Ω—ñ–≤')}\n"
        trial_text += f"üìÖ {get_text('trial_expires', language, default='–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è')}: {trial_expires.strftime('%d.%m.%Y')}\n\n"
        trial_text += f"üíé {get_text('trial_benefits', language, default='–¢–µ–ø–µ—Ä —É –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –ø—Ä–µ–º—ñ—É–º —Ñ—É–Ω–∫—Ü—ñ–π!')}\n\n"
        trial_text += get_text("trial_reminder", language, 
                             default="–ü–∞–º'—è—Ç–∞–π—Ç–µ: –ø—ñ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É.")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text("explore_premium", language, default="–î–æ—Å–ª—ñ–¥–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º —Ñ—É–Ω–∫—Ü—ñ—ó"),
                    callback_data="premium_tour"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("back_to_menu", language),
                    callback_data="main_menu"
                )
            ]
        ])
        
        await callback.message.edit_text(
            trial_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            get_text("trial_error", language, default="–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É"),
            reply_markup=get_main_menu_keyboard(language)
        )

@router.callback_query(F.data == "subscribe_premium")
async def subscribe_premium(callback: CallbackQuery, language: str = "uk"):
    """Handle premium subscription"""
    await callback.answer()
    
    # In a real implementation, this would integrate with payment systems
    subscription_text = f"üí≥ **{get_text('subscription_payment', language, default='–û–ø–ª–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏')}**\n\n"
    subscription_text += f"üí∞ {get_text('monthly_price', language, default='–í–∞—Ä—Ç—ñ—Å—Ç—å')}: {config.PREMIUM_PRICE} –≥—Ä–Ω/–º—ñ—Å—è—Ü—å\n\n"
    subscription_text += f"üí∞ {get_text('monthly_price', language, default='–í–∞—Ä—Ç—ñ—Å—Ç—å')}: {config.get('PREMIUM_PRICE', 99)} –≥—Ä–Ω/–º—ñ—Å—è—Ü—å\n\n"
    subscription_text += get_text("payment_methods", language,
                                default="–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏:\n‚Ä¢ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞\n‚Ä¢ Google Pay\n‚Ä¢ Apple Pay\n‚Ä¢ –ü—Ä–∏–≤–∞—Ç24")
    
    subscription_text += f"\n\n‚ö†Ô∏è {get_text('payment_notice', language, default='–£–í–ê–ì–ê')}: "
    subscription_text += get_text("payment_development", language,
                                default="–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏.")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("contact_support", language, default="–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"),
                callback_data="premium_support"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("start_trial", language, default="–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ"),
                callback_data="start_trial"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_premium", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–µ–º—ñ—É–º"),
                callback_data="premium"
            )
        ]
    ])
    
    await callback.message.edit_text(
        subscription_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "premium_details")
async def premium_details(callback: CallbackQuery, language: str = "uk"):
    """Show detailed premium information"""
    await callback.answer()
    
    details_text = f"üíé **{get_text('premium_detailed_info', language, default='–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–µ–º—ñ—É–º')}**\n\n"
    
    # Feature comparison
    details_text += f"üìä **{get_text('feature_comparison', language, default='–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π')}:**\n\n"
    
    features = [
        ("ai_chats", "–®–Ü —á–∞—Ç–∏", "5/–¥–µ–Ω—å", "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ"),
        ("voice_assistant", "–ì–æ–ª–æ—Å–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç", "3/–¥–µ–Ω—å", "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ"),
        ("mood_analytics", "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ—é", "–ë–∞–∑–æ–≤–∞", "–†–æ–∑—à–∏—Ä–µ–Ω–∞"),
        ("psychologist_access", "–î–æ—Å—Ç—É–ø –¥–æ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ–≤", "–ß–µ—Ä–≥–∞", "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
        ("crisis_support", "–ö—Ä–∏–∑–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
        ("recommendations", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "–ó–∞–≥–∞–ª—å–Ω—ñ", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ")
    ]
    
    details_text += f"| {'–§—É–Ω–∫—Ü—ñ—è':<20} | {'–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ':<15} | {'–ü—Ä–µ–º—ñ—É–º':<15} |\n"
    details_text += f"|{'-'*20}|{'-'*15}|{'-'*15}|\n"
    
    for feature_id, feature_name, free_limit, premium_limit in features:
        details_text += f"| {feature_name:<20} | {free_limit:<15} | {premium_limit:<15} |\n"
    
    details_text += f"\nüí∞ **{get_text('pricing_info', language, default='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü—ñ–Ω–∏')}:**\n"
    details_text += f"‚Ä¢ {get_text('monthly_subscription', language, default='–ú—ñ—Å—è—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞')}: {config.PREMIUM_PRICE} –≥—Ä–Ω\n"
    details_text += f"‚Ä¢ {get_text('monthly_subscription', language, default='–ú—ñ—Å—è—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞')}: {config.get('PREMIUM_PRICE', 99)} –≥—Ä–Ω\n"
    details_text += f"‚Ä¢ {get_text('first_week_free', language, default='–ü–µ—Ä—à–∏–π —Ç–∏–∂–¥–µ–Ω—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ')}\n"
    details_text += f"‚Ä¢ {get_text('cancel_anytime', language, default='–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å')}\n"
    details_text += f"‚Ä¢ {get_text('no_hidden_fees', language, default='–ë–µ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤')}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("start_trial", language, default="–ü–æ—á–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"),
                callback_data="start_trial"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("subscribe_now", language, default="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –∑–∞—Ä–∞–∑"),
                callback_data="subscribe_premium"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_premium", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–µ–º—ñ—É–º"),
                callback_data="premium"
            )
        ]
    ])
    
    await callback.message.edit_text(
        details_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "referral_program")
async def referral_program(callback: CallbackQuery, language: str = "uk"):
    """Show referral program information"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db_manager.get_user(user_id)
    
    if not user:
        return
    
    referral_text = f"üéÅ **{get_text('referral_program_title', language, default='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞')}**\n\n"
    referral_text += f"üîó **{get_text('your_referral_link', language, default='–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è')}:**\n"
    referral_text += f"`https://t.me/VetSupportAI_bot?start={user.referral_code}`\n\n"
    
    referral_text += f"üí∞ **{get_text('referral_benefits', language, default='–ü–µ—Ä–µ–≤–∞–≥–∏')}:**\n"
    referral_text += f"‚Ä¢ {get_text('friend_bonus', language, default='–í–∞—à –¥—Ä—É–≥ –æ—Ç—Ä–∏–º—É—î 1 —Ç–∏–∂–¥–µ–Ω—å –ø—Ä–µ–º—ñ—É–º –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ')}\n"
    referral_text += f"‚Ä¢ {get_text('your_bonus', language, default='–í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ 1 —Ç–∏–∂–¥–µ–Ω—å –ø—Ä–µ–º—ñ—É–º –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞')}\n"
    referral_text += f"‚Ä¢ {get_text('unlimited_referrals', language, default='–ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω—å')}\n\n"
    
    # Show referral statistics
    try:
        async with db_manager.pool.acquire() as conn:
            referral_stats = await conn.fetchrow('''
                SELECT COUNT(*) as total_referrals,
                       COUNT(*) FILTER (WHERE bonus_awarded = true) as successful_referrals
                FROM referrals 
                WHERE referrer_id = $1
            ''', user_id)
            
            if referral_stats:
                referral_text += f"üìä **{get_text('your_statistics', language, default='–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}:**\n"
                referral_text += f"üë• {get_text('total_invites', language, default='–í—Å—å–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω—å')}: {referral_stats['total_referrals']}\n"
                referral_text += f"‚úÖ {get_text('successful_invites', language, default='–£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—à–µ–Ω—å')}: {referral_stats['successful_referrals']}\n"
                referral_text += f"üéÅ {get_text('earned_days', language, default='–ó–∞—Ä–æ–±–ª–µ–Ω–æ –¥–Ω—ñ–≤ –ø—Ä–µ–º—ñ—É–º')}: {referral_stats['successful_referrals'] * 7}"
    except Exception:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("share_referral", language, default="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º"),
                switch_inline_query=f"–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ VetSupport AI! https://t.me/VetSupportAI_bot?start={user.referral_code}"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("copy_link", language, default="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"),
                callback_data=f"copy_referral_{user.referral_code}"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_premium", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–µ–º—ñ—É–º"),
                callback_data="premium"
            )
        ]
    ])
    
    await callback.message.edit_text(
        referral_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("copy_referral_"))
async def copy_referral_link(callback: CallbackQuery, language: str = "uk"):
    """Handle referral link copying"""
    await callback.answer(
        get_text("link_copied", language, default="–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–∏–º –∑ –¥—Ä—É–∑—è–º–∏."),
        show_alert=True
    )