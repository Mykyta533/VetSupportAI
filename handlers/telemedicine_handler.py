from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import json
from datetime import datetime, timedelta

from database.db_manager import db_manager
from database.models import TelemedicineAppointment
from utils.keyboards import get_telemedicine_keyboard, get_main_menu_keyboard
from utils.texts import get_text

router = Router()

@router.callback_query(F.data == "telemedicine")
async def telemedicine_menu(callback: CallbackQuery, language: str = "uk"):
    """Show telemedicine menu"""
    await callback.answer()
    
    menu_text = get_text("telemedicine_menu_text", language,
                        default="üè• –¢–µ–ª–µ–º–µ–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=get_telemedicine_keyboard(language)
    )

@router.callback_query(F.data == "book_appointment")
async def book_appointment_menu(callback: CallbackQuery, language: str = "uk"):
    """Show appointment booking options"""
    await callback.answer()
    
    try:
        # Load telemedicine providers from catalog
        with open("catalog.json", "r", encoding="utf-8") as f:
            catalog = json.load(f)
        
        providers = catalog.get("telemedicine_providers", [])
        
        if not providers:
            await callback.message.edit_text(
                get_text("no_providers", language, default="–ü—Ä–æ–≤–∞–π–¥–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"),
                reply_markup=get_telemedicine_keyboard(language)
            )
            return
        
        booking_text = f"üìÖ **{get_text('book_appointment_title', language, default='–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º')}**\n\n"
        booking_text += get_text("select_provider", language, default="–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏:")
        
        keyboard_buttons = []
        
        for provider in providers:
            name = provider["name"]
            specializations = ", ".join(provider.get("specializations", []))
            
            button_text = f"üè• {name}"
            if specializations:
                button_text += f" ({specializations})"
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"provider_{name.lower().replace(' ', '_')}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=get_text("back_to_telemedicine", language, default="–ù–∞–∑–∞–¥ –¥–æ —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏"),
                callback_data="telemedicine"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            booking_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            get_text("booking_error", language, default="–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"),
            reply_markup=get_telemedicine_keyboard(language)
        )

@router.callback_query(F.data.startswith("provider_"))
async def show_provider_info(callback: CallbackQuery, language: str = "uk"):
    """Show provider information and booking options"""
    await callback.answer()
    
    provider_id = callback.data.split("_", 1)[1]
    
    try:
        # Load provider info
        with open("catalog.json", "r", encoding="utf-8") as f:
            catalog = json.load(f)
        
        providers = catalog.get("telemedicine_providers", [])
        provider = None
        
        for p in providers:
            if p["name"].lower().replace(" ", "_") == provider_id:
                provider = p
                break
        
        if not provider:
            await callback.message.edit_text(
                get_text("provider_not_found", language, default="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"),
                reply_markup=get_telemedicine_keyboard(language)
            )
            return
        
        # Format provider info
        provider_text = f"üè• **{provider['name']}**\n\n"
        
        if provider.get("specializations"):
            specializations = provider["specializations"]
            spec_text = get_text("specializations", language, default="–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
            provider_text += f"üë®‚Äç‚öïÔ∏è **{spec_text}:** {', '.join(specializations)}\n\n"
        
        if provider.get("languages"):
            languages = provider["languages"]
            lang_text = get_text("languages", language, default="–ú–æ–≤–∏")
            provider_text += f"üó£ **{lang_text}:** {', '.join(languages)}\n\n"
        
        if provider.get("features"):
            features = provider["features"]
            features_text = get_text("features", language, default="–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ")
            provider_text += f"‚ö° **{features_text}:** {', '.join(features)}\n\n"
        
        provider_text += get_text("booking_notice", language,
                                default="üìù –î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. –í–∏ –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üåê {get_text('visit_website', language, default='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')} {provider['name']}",
                    url=provider.get("url", "#")
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("book_with_provider", language, default="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è"),
                    callback_data=f"book_{provider_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("back_to_providers", language, default="–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"),
                    callback_data="book_appointment"
                )
            ]
        ])
        
        await callback.message.edit_text(
            provider_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            get_text("provider_error", language, default="–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"),
            reply_markup=get_telemedicine_keyboard(language)
        )

@router.callback_query(F.data.startswith("book_"))
async def book_with_provider(callback: CallbackQuery, language: str = "uk"):
    """Book appointment with specific provider"""
    await callback.answer()
    
    provider_id = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id
    
    # For now, we'll create a placeholder appointment and direct to external booking
    try:
        # Create appointment record
        appointment = TelemedicineAppointment(
            user_id=user_id,
            doctor_name="TBD",
            specialization="psychology"
        )
        appointment.status = "pending_external"
        
        # In a real implementation, you would integrate with the provider's API
        booking_text = f"üìÖ **{get_text('booking_initiated', language, default='–ó–∞–ø–∏—Å —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ')}**\n\n"
        booking_text += get_text("booking_instructions", language,
                                default="–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:\n\n1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\n2. –û–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞\n3. –í–∏–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å\n4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–ø–∏—Å\n\n–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text("continue_booking", language, default="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞–ø–∏—Å"),
                    url="https://helsi.me/"  # Default to Helsi
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("my_appointments", language, default="–ú–æ—ó –∑–∞–ø–∏—Å–∏"),
                    callback_data="my_appointments"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("back_to_telemedicine", language, default="–ù–∞–∑–∞–¥ –¥–æ —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏"),
                    callback_data="telemedicine"
                )
            ]
        ])
        
        await callback.message.edit_text(
            booking_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            get_text("booking_failed", language, default="–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É"),
            reply_markup=get_telemedicine_keyboard(language)
        )

@router.callback_query(F.data == "my_appointments")
async def show_my_appointments(callback: CallbackQuery, language: str = "uk"):
    """Show user's appointments"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    try:
        # Get user appointments from database
        async with db_manager.pool.acquire() as conn:
            appointments = await conn.fetch('''
                SELECT * FROM telemedicine_appointments 
                WHERE user_id = $1 
                ORDER BY appointment_date DESC, appointment_time DESC
                LIMIT 10
            ''', user_id)
        
        if not appointments:
            appointments_text = get_text("no_appointments", language,
                                       default="üìÖ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.\n\n–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü—ñ—î—é '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º' –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É.")
        else:
            appointments_text = f"üìÖ **{get_text('my_appointments_title', language, default='–ú–æ—ó –∑–∞–ø–∏—Å–∏')}**\n\n"
            
            for i, apt in enumerate(appointments, 1):
                status_emoji = {
                    "pending": "‚è≥",
                    "confirmed": "‚úÖ", 
                    "completed": "‚úÖ",
                    "cancelled": "‚ùå"
                }.get(apt["status"], "üìÖ")
                
                appointments_text += f"{status_emoji} **{get_text('appointment', language, default='–ó–∞–ø–∏—Å')} #{i}**\n"
                appointments_text += f"üë®‚Äç‚öïÔ∏è {apt['doctor_name']}\n"
                appointments_text += f"üè• {apt['specialization']}\n"
                
                if apt["appointment_date"]:
                    appointments_text += f"üìÖ {apt['appointment_date'].strftime('%d.%m.%Y')}\n"
                if apt["appointment_time"]:
                    appointments_text += f"üïê {apt['appointment_time'].strftime('%H:%M')}\n"
                
                status_text = get_text(f"status_{apt['status']}", language, default=apt["status"])
                appointments_text += f"üìä {get_text('status', language, default='–°—Ç–∞—Ç—É—Å')}: {status_text}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text("book_new_appointment", language, default="–ù–æ–≤–∏–π –∑–∞–ø–∏—Å"),
                    callback_data="book_appointment"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text("back_to_telemedicine", language, default="–ù–∞–∑–∞–¥ –¥–æ —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏"),
                    callback_data="telemedicine"
                )
            ]
        ])
        
        await callback.message.edit_text(
            appointments_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            get_text("appointments_error", language, default="–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤"),
            reply_markup=get_telemedicine_keyboard(language)
        )

@router.callback_query(F.data == "find_specialist")
async def find_specialist(callback: CallbackQuery, language: str = "uk"):
    """Help find appropriate specialist"""
    await callback.answer()
    
    specialist_text = f"üîç **{get_text('find_specialist_title', language, default='–ü–æ—à—É–∫ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞')}**\n\n"
    specialist_text += get_text("specialist_guide", language,
                              default="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±:")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üß† " + get_text("psychologist", language, default="–ü—Å–∏—Ö–æ–ª–æ–≥"),
                callback_data="specialist_psychologist"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë®‚Äç‚öïÔ∏è " + get_text("psychiatrist", language, default="–ü—Å–∏—Ö—ñ–∞—Ç—Ä"),
                callback_data="specialist_psychiatrist"
            )
        ],
        [
            InlineKeyboardButton(
                text="ü©∫ " + get_text("general_practitioner", language, default="–°—ñ–º–µ–π–Ω–∏–π –ª—ñ–∫–∞—Ä"),
                callback_data="specialist_general"
            )
        ],
        [
            InlineKeyboardButton(
                text="ü´Ä " + get_text("trauma_specialist", language, default="–°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ —Ç—Ä–∞–≤–º"),
                callback_data="specialist_trauma"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_telemedicine", language, default="–ù–∞–∑–∞–¥ –¥–æ —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏"),
                callback_data="telemedicine"
            )
        ]
    ])
    
    await callback.message.edit_text(
        specialist_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("specialist_"))
async def show_specialist_info(callback: CallbackQuery, language: str = "uk"):
    """Show information about specialist type"""
    await callback.answer()
    
    specialist_type = callback.data.split("_")[1]
    
    specialist_info = {
        "psychologist": {
            "title": get_text("psychologist_title", language, default="üß† –ü—Å–∏—Ö–æ–ª–æ–≥"),
            "description": get_text("psychologist_desc", language,
                                  default="–ü—Å–∏—Ö–æ–ª–æ–≥ –¥–æ–ø–æ–º–∞–≥–∞—î –∑ –µ–º–æ—Ü—ñ–π–Ω–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, —Å—Ç—Ä–µ—Å–æ–º, —Ç—Ä–∏–≤–æ–≥–æ—é —Ç–∞ –¥–µ–ø—Ä–µ—Å—ñ—î—é. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:\n\n‚Ä¢ –†–æ–∑–º–æ–≤ –ø—Ä–æ –ø–æ—á—É—Ç—Ç—è\n‚Ä¢ –ü–æ–¥–æ–ª–∞–Ω–Ω—è —Å—Ç—Ä–µ—Å—É\n‚Ä¢ –†–æ–±–æ—Ç–∞ –∑ —Ç—Ä–∞–≤–º–∞–º–∏\n‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞—Å—Ç—Ä–æ—é"),
            "when_needed": get_text("psychologist_when", language,
                                  default="–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å, —è–∫—â–æ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ —Ç—Ä–∏–≤–æ–≥—É, –¥–µ–ø—Ä–µ—Å—ñ—é, —Å—Ç—Ä–µ—Å –∞–±–æ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ –µ–º–æ—Ü—ñ–π–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
        },
        "psychiatrist": {
            "title": get_text("psychiatrist_title", language, default="üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö—ñ–∞—Ç—Ä"),
            "description": get_text("psychiatrist_desc", language,
                                  default="–ü—Å–∏—Ö—ñ–∞—Ç—Ä - –ª—ñ–∫–∞—Ä, —è–∫–∏–π –º–æ–∂–µ –ø—Ä–∏–∑–Ω–∞—á–∞—Ç–∏ –ª—ñ–∫–∏ —Ç–∞ –ª—ñ–∫—É–≤–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω—ñ –ø—Å–∏—Ö—ñ—á–Ω—ñ —Ä–æ–∑–ª–∞–¥–∏. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:\n\n‚Ä¢ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤\n‚Ä¢ –õ—ñ–∫—É–≤–∞–Ω–Ω—è –¥–µ–ø—Ä–µ—Å—ñ—ó\n‚Ä¢ –ë—ñ–ø–æ–ª—è—Ä–Ω–∏–π —Ä–æ–∑–ª–∞–¥\n‚Ä¢ –ü–¢–°–†"),
            "when_needed": get_text("psychiatrist_when", language,
                                  default="–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∏ —Å–µ—Ä–π–æ–∑–Ω–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö, –ø–æ—Ç—Ä–µ–±—ñ –≤ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞—Ö –∞–±–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—Ü—ñ.")
        },
        "general": {
            "title": get_text("general_title", language, default="ü©∫ –°—ñ–º–µ–π–Ω–∏–π –ª—ñ–∫–∞—Ä"),
            "description": get_text("general_desc", language,
                                  default="–°—ñ–º–µ–π–Ω–∏–π –ª—ñ–∫–∞—Ä –Ω–∞–¥–∞—î –∑–∞–≥–∞–ª—å–Ω—É –º–µ–¥–∏—á–Ω—É –¥–æ–ø–æ–º–æ–≥—É —Ç–∞ –º–æ–∂–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:\n\n‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑—ñ –∑–¥–æ—Ä–æ–≤'—è–º\n‚Ä¢ –ü–µ—Ä–≤–∏–Ω–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó\n‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω—å –¥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤\n‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∏"),
            "when_needed": get_text("general_when", language,
                                  default="–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.")
        },
        "trauma": {
            "title": get_text("trauma_title", language, default="ü´Ä –°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ —Ç—Ä–∞–≤–º"),
            "description": get_text("trauma_desc", language,
                                  default="–°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ —Ç—Ä–∞–≤–º –ø—Ä–∞—Ü—é—î –∑ –ü–¢–°–† —Ç–∞ –Ω–∞—Å–ª—ñ–¥–∫–∞–º–∏ —Ç—Ä–∞–≤–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–¥—ñ–π. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:\n\n‚Ä¢ –ü–¢–°–†\n‚Ä¢ –í—ñ–π—Å—å–∫–æ–≤—ñ —Ç—Ä–∞–≤–º–∏\n‚Ä¢ –§–ª–µ—à–±–µ–∫–∏ —Ç–∞ –∫–æ—à–º–∞—Ä–∏\n‚Ä¢ –ï–º–æ—Ü—ñ–π–Ω–µ –æ–Ω—ñ–º—ñ–Ω–Ω—è"),
            "when_needed": get_text("trauma_when", language,
                                  default="–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∏ —Å–∏–º–ø—Ç–æ–º–∞—Ö –ü–¢–°–†, —Ñ–ª–µ—à–±–µ–∫–∞—Ö, –∫–æ—à–º–∞—Ä–∞—Ö –∞–±–æ –ø—ñ—Å–ª—è —Ç—Ä–∞–≤–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–¥—ñ–π.")
        }
    }
    
    info = specialist_info.get(specialist_type)
    
    if not info:
        await callback.message.edit_text(
            get_text("specialist_not_found", language, default="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"),
            reply_markup=get_telemedicine_keyboard(language)
        )
        return
    
    info_text = f"{info['title']}\n\n"
    info_text += f"üìù **{get_text('description', language, default='–û–ø–∏—Å')}:**\n{info['description']}\n\n"
    info_text += f"‚ö° **{get_text('when_to_contact', language, default='–ö–æ–ª–∏ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å')}:**\n{info['when_needed']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=get_text("book_with_specialist", language, default="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞"),
                callback_data="book_appointment"
            )
        ],
        [
            InlineKeyboardButton(
                text=get_text("back_to_specialists", language, default="–ù–∞–∑–∞–¥ –¥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤"),
                callback_data="find_specialist"
            )
        ]
    ])
    
    await callback.message.edit_text(
        info_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )